{"version":3,"sources":["config/endpoints.js","hooks/useGetCurrencies.js","hooks/useTicker.js","Ticker.js","App.js","index.js"],"names":["endpoints","getCurrencies","websocket","useCurrencies","useState","currencies","setCurrencies","useEffect","fetch","then","data","json","filter","item","symbol","match","useTicker","callback","sendJsonMessage","useWebSocket","onMessage","e","JSON","parse","share","subscribe","useCallback","ticker","method","params","unsubscribe","Ticker","memo","id","value","setValue","updateValue","last","App","page","setPage","paginationConfig","useMemo","current","onChange","pageSize","size","showSizeChanger","className","dataSource","pagination","rowKey","title","render","_","Text","replace","dataIndex","ReactDOM","StrictMode","document","getElementById"],"mappings":"2NAKeA,EALG,CACdC,cAAe,uDACfC,UAAW,kDCiBAC,EAfO,WAClB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KASA,OAPAC,qBAAU,WACNC,MAAMR,EAAUC,eACXQ,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKE,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,MAAM,iBACnDN,KAAKH,KACX,IAEI,CACHD,e,kBCuBOW,EAjCG,SAACC,GACf,IAAQC,EAAoBC,IACxBnB,EAAUE,UACV,CACIkB,UAAW,SAACC,GAAD,OAAOJ,EAASK,KAAKC,MAAMF,EAAEX,QACxCc,OAAO,IAJPN,gBA0BR,MAAO,CACHO,UAnBoBC,uBAAY,YAAiB,IAAdC,EAAa,EAAbA,OACnCT,EAAgB,CACZU,OAAQ,kBACRC,OAAQ,CACJf,OAAQa,OAGjB,CAACT,IAaAY,YAXsBJ,uBAAY,YAAiB,IAAdC,EAAa,EAAbA,OACrCT,EAAgB,CACZU,OAAQ,oBACRC,OAAQ,CACJf,OAAQa,OAGjB,CAACT,MCNOa,EApBAC,gBAAK,YAAa,IAAVC,EAAS,EAATA,GACnB,EAA0B7B,mBAAS,MAAnC,mBAAO8B,EAAP,KAAcC,EAAd,KAEMC,EAAcV,uBAAY,SAAChB,GACT,WAAhBA,EAAKkB,QAAuBlB,EAAKmB,OAAOf,SAAWmB,GACnDE,EAASzB,EAAKmB,OAAOQ,QAE1B,CAACJ,IAEJ,EAAmCjB,EAAUoB,GAArCX,EAAR,EAAQA,UAAWK,EAAnB,EAAmBA,YAQnB,OANAvB,qBAAU,WAGN,OAFAkB,EAAU,CAAEE,OAAQM,IAEb,kBAAMH,EAAY,CAAEH,OAAQM,OACpC,CAACA,EAAIR,EAAWK,IAEZI,EAAQ,IAAMA,EAAQ,6D,wBCqClBI,EA7CH,WACR,MAAwBlC,mBAAS,GAAjC,mBAAOmC,EAAP,KAAaC,EAAb,KACQnC,EAAeF,IAAfE,WAEFoC,EAAmBC,mBACrB,iBAAO,CACHC,QAASJ,EACTK,SAAUJ,EACVK,SAVM,GAWNC,KAAM,QACNC,iBAAiB,KAErB,CAACR,IAGL,OACI,qBAAKS,UAAU,MAAf,SACI,eAAC,IAAD,CACIC,WAAY5C,EACZ2C,UAAU,mBACVE,WAAYT,EACZU,OAAQ,SAAAtC,GAAI,OAAIA,EAAKC,QAJzB,UAMI,cAAC,IAAD,CAEIsC,MAAM,2EACNC,OAAQ,SAACC,EAAGzC,GACR,OACI,cAAC,IAAW0C,KAAZ,UACK1C,EAAKC,OAAO0C,QAAQ,MAAO,OAIxCC,UAAU,MATN,QAWR,cAAC,IAAD,CAEIL,MAAM,+DACNC,OAAQ,SAACC,EAAGzC,GAAJ,OAAa,cAAC,EAAD,CAAQoB,GAAIpB,EAAKC,WAFlC,mBC7CxB4C,IAASL,OACL,cAAC,IAAMM,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.6cb57350.chunk.js","sourcesContent":["const endpoints = {\n    getCurrencies: 'https://api.exchange.bitcoin.com/api/2/public/ticker',\n    websocket: 'wss://api.exchange.bitcoin.com/api/2/ws/public',\n}\n\nexport default endpoints;\n","import { useState, useEffect } from \"react\";\n\nimport endpoints from \"../config/endpoints\";\n\nconst useCurrencies = () => {\n    const [currencies, setCurrencies] = useState([]);\n\n    useEffect(() => {\n        fetch(endpoints.getCurrencies)\n            .then(data => data.json())\n            .then(data => data.filter(item => item.symbol.match(/\\w+?USD/)))\n            .then(setCurrencies)\n    }, []);\n\n    return {\n        currencies,\n    }\n}\n\nexport default useCurrencies;\n","import { useCallback } from 'react';\n\nimport useWebSocket from 'react-use-websocket';\nimport endpoints from '../config/endpoints';\n\nconst useTicker = (callback) => {\n    const { sendJsonMessage } = useWebSocket(\n        endpoints.websocket,\n        {\n            onMessage: (e) => callback(JSON.parse(e.data)),\n            share: true,\n        },\n    );\n\n    const subscribeTicker = useCallback(({ ticker }) => {\n        sendJsonMessage({\n            method: 'subscribeTicker',\n            params: {\n                symbol: ticker,\n            },\n        });\n    }, [sendJsonMessage]);\n\n    const unsubscribeTicker = useCallback(({ ticker }) => {\n        sendJsonMessage({\n            method: 'unsubscribeTicker',\n            params: {\n                symbol: ticker,\n            },\n        });\n    }, [sendJsonMessage]);\n\n    return {\n        subscribe: subscribeTicker,\n        unsubscribe: unsubscribeTicker,\n    }\n}\n\nexport default useTicker;\n","import { useEffect, useState, memo, useCallback } from 'react';\n\nimport useTicker from './hooks/useTicker';\n\nconst Ticker = memo(({ id }) => {\n    const [value, setValue] = useState(null);\n\n    const updateValue = useCallback((data) => {\n        if (data.method === 'ticker' && data.params.symbol === id) {\n            setValue(data.params.last);\n        }\n    }, [id]);\n\n    const { subscribe, unsubscribe } = useTicker(updateValue);\n\n    useEffect(() => {\n        subscribe({ ticker: id });\n\n        return () => unsubscribe({ ticker: id });\n    }, [id, subscribe, unsubscribe]);\n\n    return value ? '$' + value : 'Нет данных';\n});\n\nexport default Ticker;\n","import { useState, useMemo } from 'react';\n\nimport { Table, Typography } from 'antd';\nimport Column from 'antd/lib/table/Column';\n\nimport useCurrencies from './hooks/useGetCurrencies';\nimport Ticker from './Ticker';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst PAGE_SIZE = 15;\n\nconst App = () => {\n    const [page, setPage] = useState(1);\n    const { currencies } = useCurrencies();\n\n    const paginationConfig = useMemo(\n        () => ({\n            current: page,\n            onChange: setPage,\n            pageSize: PAGE_SIZE,\n            size: 'small',\n            showSizeChanger: false,\n        }),\n        [page],\n    );\n\n    return (\n        <div className=\"App\">\n            <Table\n                dataSource={currencies}\n                className=\"currencies-table\"\n                pagination={paginationConfig}\n                rowKey={item => item.symbol}\n            >\n                <Column\n                    key=\"name\"\n                    title=\"Криптовалюта\"\n                    render={(_, item) => {\n                        return (\n                            <Typography.Text>\n                                {item.symbol.replace(/USD/, '')}\n                            </Typography.Text>\n                        );\n                    }}\n                    dataIndex=\"id\"\n                />\n                <Column\n                    key=\"quotation\"\n                    title=\"Котировка (USD)\"\n                    render={(_, item) => <Ticker id={item.symbol} />}\n                />\n            </Table>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}